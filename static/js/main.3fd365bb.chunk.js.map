{"version":3,"sources":["input-group.tsx","result-table.tsx","convert-tasmota.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["InputGroup","name","label","value","setter","placeholder","id","className","htmlFor","type","onChange","ResultTableRow","pin","description","ResultTable","pinouts","undefined","Fragment","map","pinout","key","GPIO","components","require","App","props","state","template","result","error","templateSettter","bind","handleSubmit","e","this","setState","target","preventDefault","pinOut","inputLine","JSON","parse","componentKey","index","component","filter","c","console","stack","Error","tasmota","message","onSubmit","React","Component","children","role","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3fd365bb.chunk.js","sourcesContent":["import React, {ChangeEvent} from 'react';\r\nimport './input-group.css';\r\n\r\nconst InputGroup: React.FC<Props> = ({name, label, value, setter, placeholder}) => {\r\n   const id = `${name}Input`;\r\n   return (\r\n      <div className=\"form-group\">\r\n         <label htmlFor={id}>{label}</label>\r\n         <input \r\n            type=\"text\" \r\n            name={name} \r\n            className=\"form-control\" \r\n            id={id}\r\n            value={value}\r\n            onChange={setter}\r\n            placeholder={placeholder}\r\n         ></input>\r\n      </div>\r\n   );\r\n}\r\n\r\ntype Props = {\r\n   name: string,\r\n   label: string,\r\n   value: string,\r\n   placeholder?: string\r\n   setter: (event: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport default InputGroup;","import React from 'react';\r\nimport { PinOut } from './convert-tasmota';\r\n\r\nconst ResultTable: React.FC<Props> = ({pinouts}) => {\r\n   if (pinouts === undefined) return <React.Fragment></React.Fragment>;\r\n   return (\r\n      <table className=\"table table-hover table-sm\">\r\n         <thead>\r\n            <tr>\r\n               <th>GPIO Pin</th>\r\n               <th>Name</th>\r\n               <th>Description</th>\r\n            </tr>\r\n         </thead>\r\n         <tbody>\r\n            {pinouts.map(pinout => <ResultTableRow key={pinout.pin} pin={pinout.pin} name={pinout.name} description={pinout.description} />)}\r\n         </tbody>\r\n      </table>\r\n   )\r\n}\r\n\r\nconst ResultTableRow: React.FC<{pin: string; name: string, description: string}> = ({pin, name, description}) => {\r\n   return (\r\n      <tr>\r\n         <td><code>{pin}</code></td>\r\n         <td>{name}</td>\r\n         <td>{description}</td>\r\n      </tr>\r\n   );\r\n}\r\n\r\ntype Props = {\r\n   pinouts: PinOut[] | undefined\r\n}\r\n\r\nexport default ResultTable;","const GPIO = [\"00\", \"01\", \"02\", \"03\", \"04\", \"05\", \"09\", \"10\", \"12\", \"13\", \"14\", \"15\", \"16\"];\r\nconst components = require('./components.json') as Component[];\r\n\r\nexport function convert(inputLine: string): PinOut[] {\r\n   const template = JSON.parse(inputLine) as Template;\r\n   \r\n   try {\r\n      const pins = template.GPIO.map((componentKey, index) => {\r\n         const component = components.filter(c => c.id === componentKey)[0];\r\n         const pin = `GPIO${GPIO[index]}`;\r\n\r\n         return { ...component, pin };\r\n      });\r\n\r\n      return pins.filter(pin => pin.id !== 0);\r\n   } catch (e) {\r\n      console.error(e.stack || e);\r\n      throw new Error('Cannot convert template, invalid input');\r\n   }\r\n}\r\n\r\ninterface Template {\r\n   NAME: string;\r\n   GPIO: number[];\r\n   FLAG: number;\r\n   BASE: number;\r\n}\r\n\r\ninterface Component {\r\n   id: number;\r\n   name: string;\r\n   description: string;\r\n}\r\n\r\nexport interface PinOut extends Component {\r\n   pin: string;\r\n}","import React, {ChangeEvent, FormEvent} from 'react';\nimport InputGroup from './input-group';\nimport ResultTable from './result-table';\nimport * as tasmota from './convert-tasmota';\nimport './App.css';\n\nexport default class App extends React.Component<{}, State> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      template: '',\n      result: undefined,\n      error: undefined\n    };\n    this.templateSettter = this.templateSettter.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  templateSettter(e: ChangeEvent<HTMLInputElement>) {\n    this.setState({template: e.target.value});\n  }\n\n  handleSubmit(e: FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    if (this.state.template === '') return this.setState({result: undefined, error: undefined});\n    try {\n      const pinOut = tasmota.convert(this.state.template);\n      this.setState({result: pinOut, error: undefined});\n    } catch (e) {\n      console.error(e.stack || e);\n      this.setState({error: e.message, result: undefined});\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"jumbotron\">\n          <h1 className=\"display-4\">Decode Tasmota Template</h1>\n          <p className=\"lead\">Decode Tasmota template JSON into GPIO pin mapping for ESP Home.</p>\n          <hr className=\"my-4\" />\n          <form className=\"form\" onSubmit={this.handleSubmit}>\n            <InputGroup \n              name=\"template\" \n              label=\"Tasmota Template JSON\" \n              value={this.state.template} \n              setter={this.templateSettter}\n              placeholder='{\"NAME\":\"Arlec Single\",\"GPIO\":[0,0,0,0,57,0,0,0,21,0,90,0,0],\"FLAG\":0,\"BASE\":18}' />\n\n            <div className=\"d-flex flex-row align-items-start\">\n              <button type=\"submit\" id=\"decodeButton\" className=\"btn btn-primary btn-lg p-2\">Decode</button>\n              <Error>{this.state.error}</Error>\n            </div>\n          </form>\n        </div>\n        <div className=\"flex\">\n          <ResultTable pinouts={this.state.result} />\n        </div>\n      </div>\n    )\n  }\n}\n\nconst Error: React.FC = (props) => {\n  if (!props.children) return <React.Fragment></React.Fragment>;\n  return (\n    <div id=\"errorMessage\" className=\"alert alert-danger flex-fill\" role=\"alert\">\n      {props.children}\n    </div>\n  );\n}\n\ninterface State {\n  template: string;\n  result: tasmota.PinOut[] | undefined;\n  error: string | undefined;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}